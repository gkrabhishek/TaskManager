{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./authservice.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthManagerService {\n  constructor(auth, router) {\n    this.auth = auth;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.auth.isLoggedIn() && this.auth.getEmployeeRole() === 'manager') {\n      return true;\n    }\n    this.router.navigate(['ro']);\n    return false;\n  }\n}\nAuthManagerService.ɵfac = function AuthManagerService_Factory(t) {\n  return new (t || AuthManagerService)(i0.ɵɵinject(i1.AuthserviceService), i0.ɵɵinject(i2.Router));\n};\nAuthManagerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthManagerService,\n  factory: AuthManagerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AASA,OAAM,MAAOA,kBAAkB;EAE7BC,YAAoBC,IAAuB,EAASC,MAAa;IAA7C,SAAI,GAAJD,IAAI;IAA4B,WAAM,GAANC,MAAM;EAAW;EACrEC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,IAAG,IAAI,CAACJ,IAAI,CAACK,UAAU,EAAE,IAAE,IAAI,CAACL,IAAI,CAACM,eAAe,EAAE,KAAG,SAAS,EAAC;MACjE,OAAO,IAAI;;IAEb,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC;IAC5B,OAAO,KAAK;EACd;;AATWT,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAU,SAAlBV,kBAAkB;EAAAW,YAFjB;AAAM","names":["AuthManagerService","constructor","auth","router","canActivate","route","state","isLoggedIn","getEmployeeRole","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Gowlikar.Abhishek\\Documents\\Projects\\TaskManger\\taskmanagerapp-angular\\taskmanagerapp-angular\\src\\app\\auth-manager.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { JwtClientService } from './jwt-client.service';\nimport { AuthserviceService } from './authservice.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthManagerService implements CanActivate{\n\n  constructor(private auth:AuthserviceService,private router:Router) { }\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\n    if(this.auth.isLoggedIn()&&this.auth.getEmployeeRole()==='manager'){\n      return true;\n    }\n    this.router.navigate(['ro']);\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}