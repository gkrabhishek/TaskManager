{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./authservice.service\";\nexport class JwtClientService {\n  // private editTaskSource=new Subject<Object>();\n  // editTask$=this.editTaskSource.asObservable();\n  constructor(http, auth) {\n    this.http = http;\n    this.auth = auth;\n  }\n  //task=new BehaviorSubject<any>(null);\n  sendTask(message) {\n    const dataJson = JSON.stringify(message);\n    localStorage.setItem(\"task\", dataJson);\n    // this.task.next(message);\n    // localStorage.setItem(\"task\",JSON.stringify(message));\n  }\n\n  getTask() {\n    const data = localStorage.getItem(\"task\");\n    return JSON.parse(data);\n    // return this.task.asObservable();\n  }\n\n  generateToken(request) {\n    console.log(\"from jwt\", request);\n    return this.http.post(\"http://localhost:8081/user/login\", request, {\n      responseType: 'text'\n    });\n  }\n  welcome() {\n    const token = this.auth.getToken();\n    let tokenStr = 'Bearer ' + token;\n    console.log(tokenStr);\n    //const headers=new HttpHeaders().set(\"Authorization\",tokenStr)\n    return this.http.get(\"http://localhost:8081/user/home\", {\n      headers: new HttpHeaders().set(\"Authorization\", tokenStr)\n    });\n  }\n  getAllTask() {\n    const token = this.auth.getToken();\n    let tokenStr = 'Bearer ' + token;\n    const currentUser = this.auth.extractPayloadFromToken(token);\n    const headers = new HttpHeaders().set(\"Authorization\", tokenStr);\n    console.log('header ', token);\n    return this.http.get(\"http://localhost:8081/user/\" + currentUser + \"/getAllTasks\", {\n      headers: headers\n    });\n    // return this.http.get(\"http://localhost:8081/user/\"+currentUser+\"/getAllTasks\");\n  }\n\n  updateTask(id, data) {\n    console.log(\"id \", id);\n    console.log(\"data \", data);\n    const token = this.auth.getToken();\n    let tokenStr = 'Bearer ' + token;\n    const headers = new HttpHeaders().set(\"Authorization\", tokenStr);\n    return this.http.patch(\"http://localhost:8081/user/task/\" + id + \"/update\", data, {\n      headers: headers\n    });\n  }\n  onDeleteTask(id) {\n    const token = this.auth.getToken();\n    let tokenStr = 'Bearer ' + token;\n    const headers = new HttpHeaders().set(\"Authorization\", tokenStr);\n    return this.http.delete(\"http://localhost:8081/user/task/\" + id + \"/delete\", {\n      headers: headers\n    });\n  }\n  signup(newUser) {\n    return this.http.post(\"http://localhost:8081/user/signup\", newUser, {\n      responseType: 'text'\n    });\n  }\n  getAllEmployees() {\n    const token = this.auth.getToken();\n    let tokenStr = 'Bearer ' + token;\n    const headers = new HttpHeaders().set(\"Authorization\", tokenStr);\n    return this.http.get(\"http://localhost:8081/user/getUsers\");\n  }\n}\nJwtClientService.ɵfac = function JwtClientService_Factory(t) {\n  return new (t || JwtClientService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthserviceService));\n};\nJwtClientService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: JwtClientService,\n  factory: JwtClientService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","JwtClientService","constructor","http","auth","sendTask","message","dataJson","JSON","stringify","localStorage","setItem","getTask","data","getItem","parse","generateToken","request","console","log","post","responseType","welcome","token","getToken","tokenStr","get","headers","set","getAllTask","currentUser","extractPayloadFromToken","updateTask","id","patch","onDeleteTask","delete","signup","newUser","getAllEmployees","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Gowlikar.Abhishek\\Documents\\Projects\\TaskManger\\taskmanagerapp-angular\\taskmanagerapp-angular\\src\\app\\jwt-client.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { AuthserviceService } from './authservice.service';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JwtClientService {\n\n  // private editTaskSource=new Subject<Object>();\n  // editTask$=this.editTaskSource.asObservable();\n   \n  constructor(private http:HttpClient ,private auth :AuthserviceService) { \n    \n  }\n\n  //task=new BehaviorSubject<any>(null);\n  sendTask(message:string){\n    const dataJson=JSON.stringify(message);\n    localStorage.setItem(\"task\",dataJson);\n    // this.task.next(message);\n    // localStorage.setItem(\"task\",JSON.stringify(message));\n  }\n  getTask(){\n    const data:any=localStorage.getItem(\"task\")\n    return JSON.parse(data);\n    // return this.task.asObservable();\n  }\n\n\n\n  public generateToken(request:any){\n    console.log(\"from jwt\",request)\n    return  this.http.post(\"http://localhost:8081/user/login\",request,{responseType:'text' as 'json'});\n  \n  }\n\n  public welcome(){\n    const token = this.auth.getToken();\n    \n    let tokenStr='Bearer '+token;\n    console.log(tokenStr)\n\n    \n    //const headers=new HttpHeaders().set(\"Authorization\",tokenStr)\n    \n    return this.http.get(\"http://localhost:8081/user/home\",{\n      headers: new HttpHeaders().set(\"Authorization\",tokenStr)\n    });\n  }\n\n\n  public getAllTask(){\n    const token:any=this.auth.getToken();\n    let tokenStr='Bearer '+token;\n    const currentUser=this.auth.extractPayloadFromToken(token);\n    const headers=new HttpHeaders().set(\"Authorization\",tokenStr);\n    console.log('header ',token)\n    return this.http.get(\"http://localhost:8081/user/\"+currentUser+\"/getAllTasks\",{\n      headers:headers});\n    // return this.http.get(\"http://localhost:8081/user/\"+currentUser+\"/getAllTasks\");\n  }\n\n\n  public updateTask(id:number,data:any){\n    console.log(\"id \",id);\n    console.log(\"data \",data)\n    const token:any=this.auth.getToken();\n    let tokenStr='Bearer '+token;\n    const headers=new HttpHeaders().set(\"Authorization\",tokenStr);\n    return this.http.patch(\"http://localhost:8081/user/task/\"+id+\"/update\",data,{\n      headers:headers})\n  }\n\n\n  public onDeleteTask(id:number){\n    const token:any=this.auth.getToken();\n    let tokenStr='Bearer '+token;\n    const headers=new HttpHeaders().set(\"Authorization\",tokenStr);\n    return this.http.delete(\"http://localhost:8081/user/task/\"+id+\"/delete\",{\n      headers:headers\n    })\n  }\n\n  public signup(newUser:any){\n      return this.http.post(\"http://localhost:8081/user/signup\",newUser,{responseType:'text' as 'json'})\n  }\n\n  public getAllEmployees(){\n    const token :any=this.auth.getToken();\n    let tokenStr='Bearer '+token;\n    const headers=new HttpHeaders().set(\"Authorization\",tokenStr);\n    return this.http.get(\"http://localhost:8081/user/getUsers\",)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}