{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./authservice.service\";\nexport class JwtClientService {\n  // private editTaskSource=new Subject<Object>();\n  // editTask$=this.editTaskSource.asObservable();\n  constructor(http, auth) {\n    this.http = http;\n    this.auth = auth;\n    this.task = new BehaviorSubject(null);\n  }\n  sendTask(message) {\n    // const dataJson=JSON.stringify(message);\n    // localStorage.setItem(\"task\",dataJson);\n    this.task.next(message);\n    localStorage.setItem(\"task\", JSON.parse(message));\n  }\n  getTask() {\n    // const data:any=localStorage.getItem(\"task\")\n    // return JSON.parse(data);\n  }\n  generateToken(request) {\n    console.log(\"from jwt\", request);\n    return this.http.post(\"http://localhost:8081/user/login\", request, {\n      responseType: 'text'\n    });\n  }\n  welcome() {\n    const token = this.auth.getToken();\n    let tokenStr = 'Bearer ' + token;\n    console.log(tokenStr);\n    //const headers=new HttpHeaders().set(\"Authorization\",tokenStr)\n    return this.http.get(\"http://localhost:8081/user/home\", {\n      headers: new HttpHeaders().set(\"Authorization\", tokenStr)\n    });\n  }\n  getAllTask() {\n    const token = this.auth.getToken();\n    let tokenStr = 'Bearer ' + token;\n    const currentUser = this.auth.extractPayloadFromToken(token);\n    const headers = new HttpHeaders().set(\"Authorization\", tokenStr);\n    console.log('header ', token);\n    return this.http.get(\"http://localhost:8081/user/\" + currentUser + \"/getAllTasks\", {\n      headers: headers\n    });\n    // return this.http.get(\"http://localhost:8081/user/\"+currentUser+\"/getAllTasks\");\n  }\n\n  updateTask(id, data) {\n    console.log(\"id \", id);\n    console.log(\"data \", data);\n    const token = this.auth.getToken();\n    let tokenStr = 'Bearer ' + token;\n    const headers = new HttpHeaders().set(\"Authorization\", tokenStr);\n    return this.http.patch(\"http://localhost:8081/user/task/\" + id + \"/update\", data, {\n      headers: headers\n    });\n  }\n}\nJwtClientService.ɵfac = function JwtClientService_Factory(t) {\n  return new (t || JwtClientService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthserviceService));\n};\nJwtClientService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: JwtClientService,\n  factory: JwtClientService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,eAAe,QAAiB,MAAM;;;;AAK/C,OAAM,MAAOC,gBAAgB;EAE3B;EACA;EAEAC,YAAoBC,IAAe,EAAUC,IAAwB;IAAjD,SAAI,GAAJD,IAAI;IAAqB,SAAI,GAAJC,IAAI;IAEjD,SAAI,GAAC,IAAIJ,eAAe,CAAM,IAAI,CAAC;EAFsC;EAGzEK,QAAQ,CAACC,OAAc;IACrB;IACA;IACA,IAAI,CAACC,IAAI,CAACC,IAAI,CAACF,OAAO,CAAC;IACvBG,YAAY,CAACC,OAAO,CAAC,MAAM,EAACC,IAAI,CAACC,KAAK,CAACN,OAAO,CAAC,CAAC;EAClD;EACAO,OAAO;IACL;IACA;EAAA;EAMKC,aAAa,CAACC,OAAW;IAC9BC,OAAO,CAACC,GAAG,CAAC,UAAU,EAACF,OAAO,CAAC;IAC/B,OAAQ,IAAI,CAACZ,IAAI,CAACe,IAAI,CAAC,kCAAkC,EAACH,OAAO,EAAC;MAACI,YAAY,EAAC;IAAgB,CAAC,CAAC;EAEpG;EAEOC,OAAO;IACZ,MAAMC,KAAK,GAAG,IAAI,CAACjB,IAAI,CAACkB,QAAQ,EAAE;IAElC,IAAIC,QAAQ,GAAC,SAAS,GAACF,KAAK;IAC5BL,OAAO,CAACC,GAAG,CAACM,QAAQ,CAAC;IAGrB;IAEA,OAAO,IAAI,CAACpB,IAAI,CAACqB,GAAG,CAAC,iCAAiC,EAAC;MACrDC,OAAO,EAAE,IAAI1B,WAAW,EAAE,CAAC2B,GAAG,CAAC,eAAe,EAACH,QAAQ;KACxD,CAAC;EACJ;EAGOI,UAAU;IACf,MAAMN,KAAK,GAAK,IAAI,CAACjB,IAAI,CAACkB,QAAQ,EAAE;IACpC,IAAIC,QAAQ,GAAC,SAAS,GAACF,KAAK;IAC5B,MAAMO,WAAW,GAAC,IAAI,CAACxB,IAAI,CAACyB,uBAAuB,CAACR,KAAK,CAAC;IAC1D,MAAMI,OAAO,GAAC,IAAI1B,WAAW,EAAE,CAAC2B,GAAG,CAAC,eAAe,EAACH,QAAQ,CAAC;IAC7DP,OAAO,CAACC,GAAG,CAAC,SAAS,EAACI,KAAK,CAAC;IAC5B,OAAO,IAAI,CAAClB,IAAI,CAACqB,GAAG,CAAC,6BAA6B,GAACI,WAAW,GAAC,cAAc,EAAC;MAC5EH,OAAO,EAACA;KAAQ,CAAC;IACnB;EACF;;EAGOK,UAAU,CAACC,EAAS,EAACC,IAAQ;IAClChB,OAAO,CAACC,GAAG,CAAC,KAAK,EAACc,EAAE,CAAC;IACrBf,OAAO,CAACC,GAAG,CAAC,OAAO,EAACe,IAAI,CAAC;IACzB,MAAMX,KAAK,GAAK,IAAI,CAACjB,IAAI,CAACkB,QAAQ,EAAE;IACpC,IAAIC,QAAQ,GAAC,SAAS,GAACF,KAAK;IAC5B,MAAMI,OAAO,GAAC,IAAI1B,WAAW,EAAE,CAAC2B,GAAG,CAAC,eAAe,EAACH,QAAQ,CAAC;IAC7D,OAAO,IAAI,CAACpB,IAAI,CAAC8B,KAAK,CAAC,kCAAkC,GAACF,EAAE,GAAC,SAAS,EAACC,IAAI,EAAC;MAC1EP,OAAO,EAACA;KAAQ,CAAC;EACrB;;AA/DWxB,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAiC,SAAhBjC,gBAAgB;EAAAkC,YAFf;AAAM","names":["HttpHeaders","BehaviorSubject","JwtClientService","constructor","http","auth","sendTask","message","task","next","localStorage","setItem","JSON","parse","getTask","generateToken","request","console","log","post","responseType","welcome","token","getToken","tokenStr","get","headers","set","getAllTask","currentUser","extractPayloadFromToken","updateTask","id","data","patch","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Gowlikar.Abhishek\\Documents\\Projects\\TaskManger\\taskmanagerapp-angular\\taskmanagerapp-angular\\src\\app\\jwt-client.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { AuthserviceService } from './authservice.service';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JwtClientService {\n\n  // private editTaskSource=new Subject<Object>();\n  // editTask$=this.editTaskSource.asObservable();\n   \n  constructor(private http:HttpClient ,private auth :AuthserviceService) { }\n\n  task=new BehaviorSubject<any>(null);\n  sendTask(message:string){\n    // const dataJson=JSON.stringify(message);\n    // localStorage.setItem(\"task\",dataJson);\n    this.task.next(message);\n    localStorage.setItem(\"task\",JSON.parse(message));\n  }\n  getTask(){\n    // const data:any=localStorage.getItem(\"task\")\n    // return JSON.parse(data);\n    \n  }\n\n\n\n  public generateToken(request:any){\n    console.log(\"from jwt\",request)\n    return  this.http.post(\"http://localhost:8081/user/login\",request,{responseType:'text' as 'json'});\n  \n  }\n\n  public welcome(){\n    const token = this.auth.getToken();\n    \n    let tokenStr='Bearer '+token;\n    console.log(tokenStr)\n\n    \n    //const headers=new HttpHeaders().set(\"Authorization\",tokenStr)\n    \n    return this.http.get(\"http://localhost:8081/user/home\",{\n      headers: new HttpHeaders().set(\"Authorization\",tokenStr)\n    });\n  }\n\n\n  public getAllTask(){\n    const token:any=this.auth.getToken();\n    let tokenStr='Bearer '+token;\n    const currentUser=this.auth.extractPayloadFromToken(token);\n    const headers=new HttpHeaders().set(\"Authorization\",tokenStr);\n    console.log('header ',token)\n    return this.http.get(\"http://localhost:8081/user/\"+currentUser+\"/getAllTasks\",{\n      headers:headers});\n    // return this.http.get(\"http://localhost:8081/user/\"+currentUser+\"/getAllTasks\");\n  }\n\n\n  public updateTask(id:number,data:any){\n    console.log(\"id \",id);\n    console.log(\"data \",data)\n    const token:any=this.auth.getToken();\n    let tokenStr='Bearer '+token;\n    const headers=new HttpHeaders().set(\"Authorization\",tokenStr);\n    return this.http.patch(\"http://localhost:8081/user/task/\"+id+\"/update\",data,{\n      headers:headers})\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}